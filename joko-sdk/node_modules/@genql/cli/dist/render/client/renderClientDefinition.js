"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderClientDefinition = void 0;
const objectType_1 = require("../chain/objectType");
const requestTypeName_1 = require("../requestTypes/requestTypeName");
const config_1 = require("../../config");
const renderClient_1 = require("./renderClient");
const renderClientDefinition = (schema, ctx) => {
    const queryType = schema.getQueryType();
    const mutationType = schema.getMutationType();
    const subscriptionType = schema.getSubscriptionType();
    ctx.addCodeBlock(`
    import { FieldsSelection, GraphqlOperation, ClientOptions, Observable } from '${config_1.RUNTIME_LIB_NAME}'
    import { SubscriptionClient } from 'subscriptions-transport-ws'
    export * from './schema'
    ${renderClientTypesImports({ mutationType, queryType, subscriptionType })}
    export declare const createClient:(options?: ClientOptions)=>Client
    export declare const everything: { __scalar: boolean }
    export declare const version: string
  `);
    // Client interface
    ctx.addCodeBlock(renderClientType({ mutationType, queryType, subscriptionType }));
    // generateQueryOp and QueryResult types
    ctx.addCodeBlock(renderSupportFunctionsTypes({
        mutationType,
        queryType,
        subscriptionType,
    }));
    ctx.addCodeBlock(renderClient_1.renderEnumsMaps(schema, 'type'));
};
exports.renderClientDefinition = renderClientDefinition;
function renderClientTypesImports({ queryType, mutationType, subscriptionType, }) {
    const imports = [];
    if (queryType) {
        imports.push(requestTypeName_1.requestTypeName(queryType), objectType_1.chainTypeName(queryType, 'Promise'), queryType.name);
    }
    if (mutationType) {
        imports.push(requestTypeName_1.requestTypeName(mutationType), objectType_1.chainTypeName(mutationType, 'Promise'), mutationType.name);
    }
    if (subscriptionType) {
        imports.push(requestTypeName_1.requestTypeName(subscriptionType), objectType_1.chainTypeName(subscriptionType, 'Observable'), subscriptionType.name);
    }
    if (imports.length > 0) {
        return `import {${imports.join(',')}} from './schema'`;
    }
    return '';
}
function renderClientType({ queryType, mutationType, subscriptionType }) {
    let interfaceContent = '';
    let chainTypeContent = '';
    if (queryType) {
        interfaceContent += `
        query<R extends ${requestTypeName_1.requestTypeName(queryType)}>(
            request: R & { __name?: string },
        ): Promise<FieldsSelection<${queryType.name}, R>>
        `;
        chainTypeContent += `
        query: ${objectType_1.chainTypeName(queryType, 'Promise')}
        `;
    }
    if (mutationType) {
        interfaceContent += `
        mutation<R extends ${requestTypeName_1.requestTypeName(mutationType)}>(
            request: R & { __name?: string },
        ): Promise<FieldsSelection<${mutationType.name}, R>>
        `;
        chainTypeContent += `
        mutation: ${objectType_1.chainTypeName(mutationType, 'Promise')}
        `;
    }
    if (subscriptionType) {
        interfaceContent += `
        subscription<R extends ${requestTypeName_1.requestTypeName(subscriptionType)}>(
            request: R & { __name?: string },
        ): Observable<FieldsSelection<${subscriptionType.name}, R>>
        `;
        chainTypeContent += `
        subscription: ${objectType_1.chainTypeName(subscriptionType, 'Observable')}
        `;
    }
    return `
    export interface Client {
        wsClient?: SubscriptionClient
        ${interfaceContent}
        chain: {
            ${chainTypeContent}
        }
    }
    `;
} // TODO add the close method that closes the ws client
function renderSupportFunctionsTypes({ queryType, mutationType, subscriptionType, }) {
    let code = '';
    if (queryType) {
        code += `
        export type QueryResult<fields extends ${requestTypeName_1.requestTypeName(queryType)}> = FieldsSelection<${queryType.name}, fields>

        export declare const generateQueryOp: (fields: ${requestTypeName_1.requestTypeName(queryType)} & { __name?: string }) => GraphqlOperation`;
    }
    if (mutationType) {
        code += `
        export type MutationResult<fields extends ${requestTypeName_1.requestTypeName(mutationType)}> = FieldsSelection<${mutationType.name}, fields>

        export declare const generateMutationOp: (fields: ${requestTypeName_1.requestTypeName(mutationType)} & { __name?: string }) => GraphqlOperation`;
    }
    if (subscriptionType) {
        code += `
        export type SubscriptionResult<fields extends ${requestTypeName_1.requestTypeName(subscriptionType)}> = FieldsSelection<${subscriptionType.name}, fields>

        export declare const generateSubscriptionOp: (fields: ${requestTypeName_1.requestTypeName(subscriptionType)} & { __name?: string }) => GraphqlOperation`;
    }
    return code;
}
//# sourceMappingURL=renderClientDefinition.js.map